import { APIGatewayProxyEvent, Context } from "aws-lambda";

export const mockContext: Context = {
  callbackWaitsForEmptyEventLoop: false,
  succeed: () => "mock",
  fail: () => "mock",
  done: () => "mock",
  functionVersion: "String",
  functionName: "String",
  memoryLimitInMB: "String",
  logGroupName: "String",
  logStreamName: "String",
  clientContext: undefined,
  identity: undefined,
  invokedFunctionArn: "String",
  awsRequestId: "String",
  getRemainingTimeInMillis: () => 100,
};

export const mockApiGateWayProxyEvent: APIGatewayProxyEvent = {
  resource: "String",
  path: "String",
  httpMethod: "POST",
  headers: {
    Accept: "*/*",
  },
  multiValueHeaders: {
    Accept: ["*/*"],
  },
  queryStringParameters: null,
  multiValueQueryStringParameters: null,
  pathParameters: null,
  stageVariables: null,
  requestContext: {
    authorizer: null,
    resourceId: "nmthcx",
    resourcePath: "/todo",
    httpMethod: "POST",
    extendedRequestId: "String",
    requestTime: "01/Mar/2024:14:54:06 +0000",
    path: "/prod/todo",
    accountId: "12345678910",
    protocol: "HTTP/1.1",
    stage: "prod",
    domainPrefix: "String",
    requestTimeEpoch: 1709304846884,
    requestId: "String",
    identity: {
      apiKey: null,
      apiKeyId: null,
      clientCert: null,
      cognitoIdentityPoolId: null,
      accountId: null,
      cognitoIdentityId: null,
      caller: null,
      sourceIp: "111.111.111.111",
      principalOrgId: null,
      accessKey: null,
      cognitoAuthenticationType: null,
      cognitoAuthenticationProvider: null,
      userArn: null,
      userAgent: "Thunder Client (https://www.thunderclient.com)",
      user: null,
    },
    domainName: "123456.execute-api.us-east-1.amazonaws.com",
    apiId: "String",
  },
  body: "{id:1234,todo:hello}",
  isBase64Encoded: false,
};
